[ROOT PATH]
root_path = C:\AI\AI_PPROJECT\EXPERIMENTS\Motor Claim Fraud Detection

[FOLDERS]
dataset_folder = Dataset
raw_dataset_folder = RAW
preprocessed_dataset = PREPROCESSED
final_dataset_folder = FINAL
final_model_folder = Best Model
result_visualisation_folder = Model Visualization
model_results_folder = Model Results
model_resources_folder = Resources

[TRAIN TEST SPLIT]
split_ratio = 0.15

[MODEL PARAMETERS]
shuffle = true
random_state = 42
n_splits = 10
scoring = ["accuracy", "recall", "precision", "f1", "roc_auc"]
n_iter = 50

[MODEL PREDICTION]
threshold = 0.5

[COLUMN PREPROCESSING FLAGS]
drop_duplicate_records = true
one_hot_encoding_columns = ['auto_make', 'policy_state', 'policy_csl', 'insured_occupation', 'insured_hobbies', 'insured_relationship', 'incident_type', 'collision_type', 'authorities_contacted', 'incident_state', 'incident_city', 'property_damage', 'police_report_available', 'auto_year', 'policy_deductable']
label_encoding_target_column = ['fraud_reported']
count_frequency_encoding_columns = []
ordinal_encoding_columns = ['insured_education_level', 'incident_severity']
ordinal_insured_education_level_hierarchy = ['High School', 'College', 'Associate', 'JD', 'MD', 'Masters', 'PhD']
ordinal_incident_severity_hierarchy = ['Trivial Damage', 'Minor Damage', 'Major Damage', 'Total Loss']
columns_to_be_dropped = ['policy_number', 'insured_zip', 'insured_sex', '_c39', 'incident_location', 'auto_model', 'total_claim_amount', 'policy_bind_date', 'incident_date', 'months_as_customer', 'age']
date_based_columns = ['policy_bind_date', 'incident_date']
category_based_columns = ['policy_deductable', 'policy_state', 'policy_csl', 'insured_education_level', 'insured_occupation', 'insured_hobbies', 'insured_relationship', 'incident_type', 'incident_severity', 'authorities_contacted', 'incident_state', 'incident_city', 'property_damage', 'police_report_available', 'auto_make', 'auto_year', 'collision_type']
integer_based_columns = ['number_of_vehicles_involved', 'bodily_injuries', 'witnesses', 'injury_claim', 'property_claim', 'vehicle_claim', 'incident_hour_of_the_day', 'umbrella_limit', 'months_as_customer', 'age']
float_based_columns = ['policy_annual_premium']
target_column = fraud_reported

[CLASS IMBALANCE]
class_imbalance_flag = true
class_imbalance_method = smote


[NORMALISATION]
scaling = false
scaling_method = standard_scaler


[HYPERPARAMETER TUNING METHODS]
hyperparamater_tuning = true
hyperparameter_method = randomizedsearchcv


[DECISION TREE CLASSIFIER PARAMETERS]
decision_tree_params = {"criterion": ["gini", "entropy"],
                       "max_depth": [1, 2, 3, 4, 5, 6, 7, 8, 10, 15, 20, 50, 100, 500],
                       "min_samples_split": [1, 2, 3, 4, 5, 6, 7, 8, 10],
                       "min_samples_leaf": [1, 2, 3, 4, 5, 6, 7, 8, 10],
                       "max_features": ["auto", "sqrt", "log2"],
                       "max_leaf_nodes": [2, 3, 4, 5, 6, 7, 8, 9, 10],
                       "min_samples_split": [5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]
                       }

[RANDOM FOREST CLASSIFIER PARAMETERS]
random_forest_params = {"n_estimators": [10, 20, 50, 100, 150, 200, 250, 300, 500],
                       "max_depth": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
                       "min_impurity_decrease": [0, 0.0001, 0.001, 0.01, 0.0002, 0.002, 0.02, 0.0005, 0.005, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5],
                       "max_features": ["auto", "sqrt", "log2"],
                       "bootstrap": [True, False],
                       "min_samples_split": [2, 3, 4, 5, 6],
                       "min_samples_leaf": [2, 3, 4, 5, 6],
                       "criterion": ["gini", "entropy"]
                       }

[XGBOOST CLASSIFIER PARAMETERS]
xgboost_params = {"learning_rate": [0.001, 0.005, 0.01, 0.011, 0.012, 0.013, 0.015, 0.017, 0.02, 0.05, 0.1, 0.15, 0.2, 0.22,
                 0.25, 0.27, 0.3],
                 "max_depth": [1, 2, 3, 4, 5, 6, 7, 8, 10, 15, 20, 50, 100, 500],
                 "min_child_weight": [1, 2, 3, 4, 5, 6, 7],
                 "gamma": [0.0, 0.1, 0.15, 0.2, 0.25, 0.3, 0.32, 0.35, 0.37, 0.4, 0.45, .5, 0.55, 0.6, 0.63, 0.65, 0.67,
                 0.7],
                 "reg_lambda": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                 "n_estimators": [50, 100, 120, 150, 200, 450, 500, 550, 600, 700, 800, 1000, 1100, 1200, 1300, 1400, 2000],
                 "colsample_bytree": [0.1, 0.2, 0.3, 0.35, 0.4, 0.45, 0.5, 0.6, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 0.97, 0.99]}


[MODELS TRAINING]
models_list = ["Random Forest Classifier", "XGBoost Classifier", "Decision Tree Classifier"]


[SERVER]
port = 5005

[CAUSALITY]
prediction_threshold = 0.5
number_of_causalities = 4
fraudScore_Number_of_Decimals = 6